Traceback (most recent call last):
  File "C:\Users\acer\AppData\Roaming\Python\Python312\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\acer\AppData\Roaming\Python\Python312\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\acer\AppData\Roaming\Python\Python312\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\asyncio\base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\acer\AppData\Roaming\Python\Python312\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\acer\AppData\Roaming\Python\Python312\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\acer\AppData\Roaming\Python\Python312\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_iris

# 1. Load data
iris = load_iris()
df = pd.DataFrame(iris.data, columns=iris.feature_names)

# 2. Standarisasi fitur numerik
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df)

# 3. Pilih dua centroid awal (misalnya dari data ke-15 dan ke-20)
centroid_1 = X_scaled[1]  # Index 14 (baris ke-15)
centroid_2 = X_scaled[114]  # Index 19 (baris ke-20)

# 4. Fungsi untuk menghitung jarak Euclidean
def euclidean_distance(point, centroid):
    return np.sqrt(np.sum((point - centroid) ** 2))

# Hitung jarak tiap titik ke centroid
df['Distance_to_Centroid_1'] = [euclidean_distance(x, centroid_1) for x in X_scaled]
df['Distance_to_Centroid_2'] = [euclidean_distance(x, centroid_2) for x in X_scaled]

# âœ… Tentukan cluster berdasarkan jarak terdekat
df['Jarak_Terdekat'] = np.minimum(df['Distance_to_Centroid_1'], df['Distance_to_Centroid_2'])
df['Cluster_Diikuti'] = np.where(
    df['Distance_to_Centroid_1'] <= df['Distance_to_Centroid_2'], 'K1', 'K2'
)

# 7. Tampilkan semua data dalam satu tabel (fitur + hasil jarak + cluster)
print("\nHasil Iterasi ke-1")
print(df.to_string(index=True))

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 1[0m
[1;32m----> 1[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mnumpy[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mnp[39;00m
[0;32m      2[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mpd[39;00m
[0;32m      3[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpreprocessing[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m StandardScaler

[1;31mModuleNotFoundError[0m: No module named 'numpy'

